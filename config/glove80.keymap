
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed by system behaviors/macros */
#include <dt-bindings/zmk/outputs.h>

/* Include behaviour includes needed by key binds - automatically generated */
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    tapping-term-ms = <220>;
};

&lt {
    tapping-term-ms = <220>;
};

/ {
    /* Glove80 system behavior & macros */
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };

    macros {
        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
    };

    macros {
        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
    };

    macros {
        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
    };

    macros {
        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };

    /* Custom Defined Behaviors */
    behaviors {
        bksp_word: bksp_word {
            compatible = "zmk,behavior-macro";
            label = "bksp_word";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(LEFT)) &kp BACKSPACE>;
        };

        comma_space: comma_space {
            compatible = "zmk,behavior-macro";
            label = "comma_space";
            #binding-cells = <0>;
            bindings = <&kp COMMA &kp SPACE>;
        };

        sht: slow_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "slow_hold_tap";
            #binding-cells = <2>;
            tapping-term-ms = <230>;
            bindings = <&kp>, <&kp>;
        };
    };

    /* Automatically generated keymap */
    keymap {
        compatible = "zmk,keymap";


        layer_QWERTY {
            bindings = <
          &kp F12       &kp F1            &kp F2    &kp F3   &kp F4                                                                                                         &kp F7                &kp F8             &kp F9             &kp F10         &kp F11
          &kp F12       &kp N1            &kp N2    &kp N3   &kp N4      &kp N5                                                                                &kp N6       &kp N7                &kp N8             &kp N9              &kp N0         &kp F11
          &kp TAB        &kp Q             &kp W     &kp E    &kp R       &kp T                                                                                 &kp Y        &kp U                 &kp I              &kp O               &kp P     &kp LS(TAB)
    &mt LCTRL ESC        &kp A             &kp S     &kp D    &kp F       &kp G                                                                                 &kp H        &kp J                 &kp K              &kp L            &kp SEMI        &kp BSPC
        &sk LSHFT  &mt LCTRL Z           &lt 4 X     &kp C    &kp V       &kp B      &kp TAB  &kp SQT  &magic 2 0  &magic 2 0    &kp MINUS        &kp RET       &kp N        &kp M          &comma_space          &lt 4 DOT      &mt RCTRL FSLH       &sk RSHFT
            &none        &none  &kp LC(LG(LEFT))  &sk LALT   &tog 1              &lt 1 SPACE  &kp DQT       &to 0       &to 0    &kp UNDER    &lt 3 SPACE               &caps_word              &sk RALT  &kp LC(LG(RIGHT))  &kp LC(LA(LSHIFT))        &kp LGUI
            >;
        };

        layer_Fn1 {
            bindings = <
                    &none              &none      &kp C_MUTE    &kp C_VOL_DN      &kp C_VOL_UP                                                                                           &kp C_PREV               &kp K_PP     &kp C_NEXT       &none            &none
                  &kp ESC         &kp LG(N1)          &kp F2      &kp LA(UP)        &kp LG(N4)         &kp LG(N5)                                                          &kp LG(N6)    &kp LG(N7)             &kp LG(N8)     &kp LG(N9)  &kp LG(N0)            &none
              &kp LA(TAB)       &kp LS(HOME)    &kp LA(LEFT)    &kp UP_ARROW     &kp LA(RIGHT)        &kp LS(END)                                                          &kp LS(UP)  &kp LC(LEFT)   &sht LG(PSCRN) PSCRN  &kp LC(RIGHT)       &none  &kp LA(LS(TAB))
                &kp LCTRL   &kp LC(LS(LEFT))  &kp LEFT_ARROW  &kp DOWN_ARROW   &kp RIGHT_ARROW  &kp LC(LS(RIGHT))                                                        &kp LS(DOWN)       &kp INS               &kp HOME      &kp PG_UP    &kp BSPC       &bksp_word
                &sk LSHFT          &kp LCTRL       &kp LC(X)       &kp LC(C)         &kp LC(V)              &none    &kp TAB   &none   &none   &none   &none    &kp RET         &none       &kp DEL                &kp END      &kp PG_DN       &none        &sk RSHFT
                   &trans             &trans          &trans          &trans            &trans                        &trans   &none   &to 0   &to 0   &none  &kp SPACE                       &none                 &trans         &trans      &trans           &trans
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                        &none   &none   &none   &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                               &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                               &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                               &none   &none   &none   &none   &none     &bootloader
      &reset            &none            &none            &none            &none            &none   &bt_2   &bt_3  &out OUT_USB  &out OUT_USB   &bt_3   &bt_2   &none   &none   &none   &none   &none          &reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1         &to 0         &to 0   &bt_1   &bt_0           &none   &none   &none   &none           &none
            >;
        };

        layer_Fn2 {
            bindings = <
                    &none      &none      &none   &kp LG(D)        &none                                                                                                        &none             &none             &none             &none   &none
          &kp LC(LS(ESC))      &none      &none       &none  &kp LG(TAB)                 &none                                                                          &none   &none             &none             &none             &none   &none
 &sht LC(LS(TAB)) LC(TAB)      &none  &kp LC(W)   &kp LG(E)    &kp LC(R)  &sht LC(LS(T)) LC(T)                                                                          &none   &none             &none             &none  &sht LG(P) LC(P)   &none
                    &none  &kp LC(A)  &kp LC(S)   &kp LC(D)    &kp LC(F)                 &none                                                                          &none   &none     &kp LC(EQUAL)  &sht LG(L) LC(L)             &none   &none
                    &none  &kp LC(Z)  &kp LC(X)   &kp LC(C)    &kp LC(V)                 &none  &sht LC(LS(TAB)) LC(TAB)   &none   &none   &none   &none  &kp RET   &kp LC(N)   &none     &kp LC(MINUS)             &none             &none   &none
                    &none      &none      &none       &none        &none                                           &none   &none   &to 0   &to 0   &none   &trans               &none             &none             &none             &none   &none
            >;
        };

        layer_Symbol {
            bindings = <
     &none      &none     &none     &none      &none                                                                               &none     &none     &none      &none      &none
   &kp F12     &kp F1    &kp F2    &kp F3     &kp F4     &kp F5                                                         &kp F6    &kp F7    &kp F8    &kp F9    &kp F10    &kp F11
     &none    &kp SQT    &kp AT    &kp LT  &kp PRCNT  &kp GRAVE                                                          &none  &kp AMPS    &kp GT  &kp BSLH  &kp MINUS      &none
 &kp LCTRL  &kp EQUAL  &kp LBRC  &kp LPAR   &kp LBKT   &kp EXCL                                                      &kp CARET  &kp RBKT  &kp RPAR  &kp RBRC  &kp COLON  &kp RCTRL
 &kp LSHFT  &kp TILDE  &kp PLUS  &kp HASH   &kp DLLR      &none   &none      &trans  &none   &none  &trans    &none      &none  &kp STAR  &kp PIPE  &kp FSLH  &kp QMARK  &kp RSHFT
     &none      &none     &none  &kp LALT      &none             &trans      &trans  &to 0   &to 0  &trans   &trans                &none  &kp RALT     &none      &none      &none
            >;
        };

    };
};
